#include "imports/stdlib.fc";

(int, int) load_data () inline {
    slice ds = get_data().begin_parse();
    return (ds~load_uint(16), ds~load_uint(256));
}

() save_data (int seqno, int public_key) impure inline {
    set_data(begin_cell().store_uint(seqno, 16).store_uint(public_key, 256).end_cell());
}

() recv_internal () impure {
    ;; do nothing for internal messages
}

() recv_external (slice in_msg) impure {
    slice signature = in_msg~load_bits(512);
    slice cs = in_msg;
    int msg_seqno = cs~load_uint(16);
    (int stored_seqno, int public_key) = load_data();
    throw_unless(33, msg_seqno == stored_seqno);
    throw_unless(35, check_signature(slice_hash(in_msg), signature, public_key));
    accept_message();
    save_data(stored_seqno + 1, public_key);
}