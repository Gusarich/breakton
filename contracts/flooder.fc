#include "imports/stdlib.fc";

(int, int) get_index_and_public_key (int index) inline {
    slice ds = get_data().begin_parse();
    ds~skip_bits(index);
    int value = ds~load_uint(1);
    return (value, ds.slice_last(256).preload_uint(256));
}

() set_index (int index) impure inline {
    slice ds = get_data().begin_parse();
    slice before = ds~load_bits(index);
    ds~skip_bits(1);
    slice after = ds;
    set_data(begin_cell().store_slice(before).store_uint(1, 1).store_slice(after).end_cell());
}

() recv_internal () impure {
    ;; do nothing for internal messages
}

() recv_external (slice in_msg) impure {
    slice signature = in_msg~load_bits(512);
    slice cs = in_msg;
    int index = cs~load_uint(10);
    (int used?, int public_key) = get_index_and_public_key(index);
    throw_if(33, used?);
    throw_unless(35, check_signature(slice_hash(in_msg), signature, public_key));
    accept_message();
    set_index(index);
}